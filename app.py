import streamlit as st
from oauth2client.service_account import ServiceAccountCredentials
import gspread

# ---------- PAGE CONFIG ----------
st.set_page_config(page_title="ЁЯза рд░реЛрдЧ рд▓рдХреНрд╖рдг рдЪреЗрдХрд░", page_icon="ЁЯзк", layout="wide")

# ---------- GOOGLE SHEETS CONNECTION ----------
SCOPE = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
service_account_info = st.secrets["google_service_account"]
CREDS = ServiceAccountCredentials.from_json_keyfile_dict(service_account_info, SCOPE)
CLIENT = gspread.authorize(CREDS)
SHEET_NAME = "symptom_records"
sheet = CLIENT.open(SHEET_NAME).sheet1

# ---------- APP TITLE ----------
st.title("ЁЯза рд▓рдХреНрд╖рдг рдЖрдзрд╛рд░рд┐рдд рд░реЛрдЧ рдЪреЗрдХрд░")
st.write("рдиреАрдЪреЗ рджрд┐рдП рдЧрдП рд▓рдХреНрд╖рдг рдЪреБрдиреЗрдВ рдФрд░ рд╕рдВрднрд╛рд╡рд┐рдд рд░реЛрдЧреЛрдВ рдПрд╡рдВ рдЬреЛрдЦрд┐рдо рд╕реНрдХреЛрд░ рдХреЛ рджреЗрдЦреЗрдВред (рдЙрдореНрд░ рдФрд░ рд▓рдХреНрд╖рдгреЛрдВ рдХреЗ рдЖрдзрд╛рд░ рдкрд░ рдЕрдиреБрдорд╛рди)")

# ---------- USER DETAILS ----------
with st.form("user_form"):
    col1, col2 = st.columns(2)
    with col1:
        name = st.text_input("ЁЯСд рдирд╛рдо")
        age = st.number_input("ЁЯОВ рдЙрдореНрд░", min_value=0, max_value=120, step=1)
        gender = st.radio("тЪз рд▓рд┐рдВрдЧ", ["рдкреБрд░реБрд╖", "рдорд╣рд┐рд▓рд╛"])
        mobile = st.text_input("ЁЯУ▒ рдореЛрдмрд╛рдЗрд▓ рдирдВрдмрд░")
    with col2:
        st.subheader("ЁЯй║ рд╕реНрд╡рд╛рд╕реНрдереНрдп рдЗрддрд┐рд╣рд╛рд╕")
        bp = st.checkbox("рдЙрдЪреНрдЪ рд░рдХреНрддрдЪрд╛рдк")
        diabetes = st.checkbox("рдордзреБрдореЗрд╣")
        heart_history = st.checkbox("рд╣реГрджрдп рдХреА рд╕рдорд╕реНрдпрд╛")
        location = st.text_input("ЁЯУН рд╢рд╣рд░ / рд╕реНрдерд╛рди")

    st.subheader("ЁЯзН рд▓рдХреНрд╖рдг рдЪреБрдиреЗрдВ")

    # ---------- BASIC SYMPTOMS ----------
    basic_symptoms = [
        "рдмреБрдЦрд╛рд░", "рдХрдВрдкрдХрдВрдкреА", "рдердХрд╛рди", "рд╕рд┐рд░ рджрд░реНрдж", "рдорддрд▓реА / рдЙрд▓реНрдЯреА", "рдорд╛рдВрд╕рдкреЗрд╢рд┐рдпреЛрдВ / рдЬреЛрдбрд╝реЛрдВ рдореЗрдВ рджрд░реНрдж"
    ]
    selected_basic = st.multiselect("ЁЯЯб рдмреЗрд╕рд┐рдХ рд▓рдХреНрд╖рдг (рд╡рд╛рдпрд░рд▓/рдмреБрдЦрд╛рд░)", basic_symptoms)

    # ---------- ADVANCED SYMPTOMS ----------
    advanced_symptoms = [
        "рджрд╕реНрдд", "рдкреЗрдЯ рджрд░реНрдж", "рднреВрдЦ рди рд▓рдЧрдирд╛", "рдЪрдХрддреНрддреЗ", "рдЦрд╛рдВрд╕реА", 
        "рдЖрдВрдЦреЛрдВ рдХреЗ рдкреАрдЫреЗ рджрд░реНрдж", "рдЧрд╛рдВрда рдпрд╛ рдЧреНрд░рдВрдерд┐рдпрд╛рдВ рд╕реВрдЬрдирд╛", "рддреНрд╡рдЪрд╛ / рдЖрдВрдЦ рдкреАрд▓реА", "рдХрдордЬрд╝реЛрд░реА"
    ]
    selected_advanced = st.multiselect("ЁЯЯа рдПрдбрд╡рд╛рдВрд╕ рд▓рдХреНрд╖рдг (рдорд▓реЗрд░рд┐рдпрд╛ / рдбреЗрдВрдЧреВ / рдмреИрдХреНрдЯреАрд░рд┐рдпрд▓)", advanced_symptoms)

    # ---------- HEART SYMPTOMS ----------
    heart_symptoms = [
        "рд╕реАрдиреЗ рдореЗрдВ рджрд░реНрдж / рджрдмрд╛рд╡", "рджрд░реНрдж рд╣рд╛рде/рдЬрдмрдбрд╝реЗ/рдкреАрда/рдЧрд▓реЗ рдХреА рдУрд░", 
        "рд╕рд╛рдВрд╕ рдлреВрд▓рдирд╛", "рддреЗрдЬрд╝ / рдЕрдирд┐рдпрдорд┐рдд рджрд┐рд▓ рдХреА рдзрдбрд╝рдХрди", "рдкреИрд░реЛрдВ/рдЯрдЦрдиреЛрдВ рдореЗрдВ рд╕реВрдЬрди",
        "рд╢рд╛рд░реАрд░рд┐рдХ рдХреНрд╖рдорддрд╛ рдореЗрдВ рдХрдореА", "рдШрд░рдШрд░рд╛рд╣рдЯ / рд▓рдЧрд╛рддрд╛рд░ рдЦрд╛рдВрд╕реА", "рдкреЗрдЯ рдореЗрдВ рд╕реВрдЬрди",
        "рддреЗрдЬрд╝ рд╡рдЬрди рдмрдврд╝рдирд╛", "рднреВрдЦ рдореЗрдВ рдХрдореА / рдорддрд▓реА", "рдзреНрдпрд╛рди рдХреЗрдВрджреНрд░рд┐рдд рдХрд░рдиреЗ рдореЗрдВ рдХрдард┐рдирд╛рдИ", 
        "рдЪрдХреНрдХрд░ / рдмреЗрд╣реЛрд╢реА", "рдардВрдбрд╛ рдкрд╕реАрдирд╛ рдЖрдирд╛"
    ]
    selected_heart = st.multiselect("ЁЯФ┤ рд╣реГрджрдп / рдХрд╛рд░реНрдбрд┐рдпрдХ рд▓рдХреНрд╖рдг", heart_symptoms)

    # ---------- CANCER SYMPTOMS (Always Active) ----------
    male_cancer_symptoms = [
        "рдкреНрд░реЛрд╕реНрдЯреЗрдЯ рдХреА рд╕рдорд╕реНрдпрд╛", "рд╡реГрд╖рдг рдореЗрдВ рдЧрд╛рдВрда / рд╕реВрдЬрди",
        "рдореБрдВрд╣ рдореЗрдВ рдЫрд╛рд▓реЗ / рдЦреВрди / рд╕реБрдиреНрдирдкрди", "рд▓рдЧрд╛рддрд╛рд░ рдЦрд╛рдВрд╕реА / рдЖрд╡рд╛рдЬрд╝ рдореЗрдВ рдмрджрд▓рд╛рд╡",
        "рд╡рдЬрд╝рди рдореЗрдВ рдЕрдЪрд╛рдирдХ рдХрдореА / рдмрдврд╝реЛрддрд░реА", "рддреНрд╡рдЪрд╛ рдореЗрдВ рдмрджрд▓рд╛рд╡ / рдкреАрд▓рд┐рдпрд╛ / рдирдП рддрд┐рд▓",
        "рд╕рд┐рд░ рджрд░реНрдж / рджреМрд░реЗ", "рдердХрд╛рди / рдХрдордЬреЛрд░реА", "рджреГрд╖реНрдЯрд┐ рдпрд╛ рд╕реБрдирдиреЗ рдореЗрдВ рд╕рдорд╕реНрдпрд╛"
    ]

    female_cancer_symptoms = [
        "рд╕реНрддрди рдореЗрдВ рдЧрд╛рдВрда / рдореЛрдЯрд╛рдкрди", "рдирд┐рдкреНрдкрд▓ рд╕реЗ рдЕрд╕рд╛рдорд╛рдиреНрдп рд╕реНрд░рд╛рд╡", "рдкреЗрд▓реНрд╡рд┐рдХ рджрд░реНрдж / рдкреЗрдЯ рдлреВрд▓рдирд╛",
        "рдЕрд╕рд╛рдорд╛рдиреНрдп рдпреЛрдирд┐ рд░рдХреНрддрд╕реНрд░рд╛рд╡", "рдкреЗрдЯ рджрд░реНрдж / рд╕реВрдЬрди",
        "рдореБрдВрд╣ рдореЗрдВ рдЫрд╛рд▓реЗ / рдЦреВрди / рд╕реБрдиреНрдирдкрди", "рд▓рдЧрд╛рддрд╛рд░ рдЦрд╛рдВрд╕реА / рдЖрд╡рд╛рдЬрд╝ рдореЗрдВ рдмрджрд▓рд╛рд╡",
        "рд╡рдЬрд╝рди рдореЗрдВ рдЕрдЪрд╛рдирдХ рдХрдореА / рдмрдврд╝реЛрддрд░реА", "рддреНрд╡рдЪрд╛ рдореЗрдВ рдмрджрд▓рд╛рд╡ / рдкреАрд▓рд┐рдпрд╛ / рдирдП рддрд┐рд▓",
        "рд╕рд┐рд░ рджрд░реНрдж / рджреМрд░реЗ", "рдердХрд╛рди / рдХрдордЬреЛрд░реА", "рджреГрд╖реНрдЯрд┐ рдпрд╛ рд╕реБрдирдиреЗ рдореЗрдВ рд╕рдорд╕реНрдпрд╛"
    ]

    st.subheader("ЁЯзм рдХреИрдВрд╕рд░ рд▓рдХреНрд╖рдг (рдкреБрд░реБрд╖ / рдорд╣рд┐рд▓рд╛)")
    selected_male_cancer = st.multiselect("рдкреБрд░реБрд╖ рд╕рдВрдмрдВрдзрд┐рдд рдХреИрдВрд╕рд░ рд▓рдХреНрд╖рдг", male_cancer_symptoms)
    selected_female_cancer = st.multiselect("рдорд╣рд┐рд▓рд╛ рд╕рдВрдмрдВрдзрд┐рдд рдХреИрдВрд╕рд░ рд▓рдХреНрд╖рдг", female_cancer_symptoms)
    selected_cancer = selected_male_cancer + selected_female_cancer

    submitted = st.form_submit_button("ЁЯФН рдЬрд╛рдВрдЪ рдХрд░реЗрдВ")

# ---------- DIAGNOSIS LOGIC ----------
def diagnose(basic, advanced, cancer, heart, age):
    possible = []
    organs = []
    risk_score = 0

    all_symptoms = basic + advanced + cancer + heart
    symptom_count = len(all_symptoms)

    # Viral / Bacterial / Dengue
    if "рдмреБрдЦрд╛рд░" in basic:
        if any(s in advanced for s in ["рджрд╕реНрдд", "рдЪрдХрддреНрддреЗ", "рдЖрдВрдЦреЛрдВ рдХреЗ рдкреАрдЫреЗ рджрд░реНрдж"]):
            if "рдЪрдХрддреНрддреЗ" in advanced or "рдЖрдВрдЦреЛрдВ рдХреЗ рдкреАрдЫреЗ рджрд░реНрдж" in advanced:
                possible.append("рдбреЗрдВрдЧреВ / рд╡рд╛рдпрд░рд▓ рд╕рдВрдХреНрд░рдордг")
                organs.append("рд░рдХреНрдд / рдкреНрд░рддрд┐рд░рдХреНрд╖рд╛ рдкреНрд░рдгрд╛рд▓реА")
            elif "рджрд╕реНрдд" in advanced:
                possible.append("рдЯрд╛рдЗрдлрд╛рдЗрдб / рдмреИрдХреНрдЯреАрд░рд┐рдпрд▓ рд╕рдВрдХреНрд░рдордг")
                organs.append("рдкрд╛рдЪрди рддрдВрддреНрд░")
            else:
                possible.append("рд╡рд╛рдпрд░рд▓ рдмреБрдЦрд╛рд░")
                organs.append("рдкреНрд░рддрд┐рд░рдХреНрд╖рд╛ рдкреНрд░рдгрд╛рд▓реА")

    # Malaria
    if "рдердХрд╛рди" in basic and "рджрд╕реНрдд" in advanced and "рдкреЗрдЯ рджрд░реНрдж" in advanced:
        possible.append("рдорд▓реЗрд░рд┐рдпрд╛")
        organs.append("рд░рдХреНрдд / рдпрдХреГрдд / рдЬреЛрдбрд╝")

    # Cancer
    if cancer:
        possible.append("рд╕рдВрднрд╛рд╡рд┐рдд рдХреИрдВрд╕рд░ рд╕рдВрдХреЗрдд")
        organs.append("рд▓рдХреНрд╖рдгреЛрдВ рдХреЗ рдЕрдиреБрд╕рд╛рд░ рдкреНрд░рднрд╛рд╡рд┐рдд рдЕрдВрдЧ")

    # Heart
    if heart:
        possible.append("рд╣реГрджрдп / рдХрд╛рд░реНрдбрд┐рдпреЛрд╡реИрд╕реНрдХреБрд▓рд░ рдЬреЛрдЦрд┐рдо")
        organs.append("рд╣реГрджрдп / рдкрд░рд┐рд╕рдВрдЪрд░рдг рддрдВрддреНрд░")

    risk_score = min(100, symptom_count * 5 + (age / 2))
    return possible, organs, risk_score

# ---------- SHOW RESULTS ----------
if submitted:
    if not name or not mobile:
        st.error("рдХреГрдкрдпрд╛ рдирд╛рдо рдФрд░ рдореЛрдмрд╛рдЗрд▓ рдирдВрдмрд░ рднрд░реЗрдВред")
    else:
        results, organs, risk = diagnose(selected_basic, selected_advanced, selected_cancer, selected_heart, age)
        if results:
            st.success("ЁЯзн **рд╕рдВрднрд╛рд╡рд┐рдд рд░реЛрдЧ:**")
            for r, o in zip(results, organs):
                st.write(f"ЁЯФ╕ {r} тЖТ рдкреНрд░рднрд╛рд╡рд┐рдд рдЕрдВрдЧ: {o}")
            st.info(f"ЁЯУК **рдЕрдиреБрдорд╛рдирд┐рдд рдЬреЛрдЦрд┐рдо рд╕реНрдХреЛрд░:** {risk:.1f}%")
        else:
            st.info("тЭЗя╕П рдЪрдпрдирд┐рдд рд▓рдХреНрд╖рдгреЛрдВ рдХреЗ рдЖрдзрд╛рд░ рдкрд░ рдХреЛрдИ рдЧрдВрднреАрд░ рд░реЛрдЧ рд╕рдВрдХреЗрдд рдирд╣реАрдВ рдорд┐рд▓реЗред")

        # Save to Google Sheet
        data = [
            name, age, gender, mobile, bp, diabetes, heart_history, location,
            ", ".join(selected_basic + selected_advanced + selected_cancer + selected_heart),
            ", ".join(results), ", ".join(organs), f"{risk:.1f}%"
        ]
        sheet.append_row(data)
        st.success("тЬЕ рдЖрдкрдХрд╛ рдбреЗрдЯрд╛ рд╕реБрд░рдХреНрд╖рд┐рдд рд░реВрдк рд╕реЗ рд░рд┐рдХреЙрд░реНрдб рдХрд░ рд▓рд┐рдпрд╛ рдЧрдпрд╛ рд╣реИред")

# ---------- FOOTER ----------
st.markdown("---")
st.caption("тЪая╕П рдпрд╣ рдЯреВрд▓ рдХреЗрд╡рд▓ рд╢реИрдХреНрд╖рдгрд┐рдХ / рдбреЗрдореЛ рдЙрджреНрджреЗрд╢реНрдп рдХреЗ рд▓рд┐рдП рд╣реИред рдЪрд┐рдХрд┐рддреНрд╕рдХреАрдп рд╕рд▓рд╛рд╣ рдХреЗ рд▓рд┐рдП рдбреЙрдХреНрдЯрд░ рд╕реЗ рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВред")
