import streamlit as st
from oauth2client.service_account import ServiceAccountCredentials
import gspread
from datetime import datetime
import pandas as pd

# ---------- рдЧреВрдЧрд▓ рд╢реАрдЯ рдХрдиреЗрдХреНрд╢рди ----------
SCOPE = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
service_account_info = st.secrets["google_service_account"]
CREDS = ServiceAccountCredentials.from_json_keyfile_dict(service_account_info, SCOPE)
CLIENT = gspread.authorize(CREDS)
SHEET_NAME = "symptom_records"

# рд╡рд░реНрдХрд╢реАрдЯ рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ
try:
    sheet = CLIENT.open(SHEET_NAME).sheet1
except Exception as e:
    st.error(f"рдЧреВрдЧрд▓ рд╢реАрдЯ рд╕реЗ рдХрдиреЗрдХреНрдЯ рд╣реЛрдиреЗ рдореЗрдВ рддреНрд░реБрдЯрд┐: {e}")

# ---------- рдРрдк рдЯрд╛рдЗрдЯрд▓ ----------
st.set_page_config(page_title="рдЙрдиреНрдирдд рд▓рдХреНрд╖рдг-рдЖрдзрд╛рд░рд┐рдд рдмреАрдорд╛рд░реА рдЬрд╛рдВрдЪрдХрд░реНрддрд╛", page_icon="ЁЯПе", layout="wide")
st.title("ЁЯПе рдЙрдиреНрдирдд рд▓рдХреНрд╖рдг-рдЖрдзрд╛рд░рд┐рдд рдмреАрдорд╛рд░реА рдЬрд╛рдВрдЪрдХрд░реНрддрд╛")
st.write("рд▓рдХреНрд╖рдг рдЪреБрдиреЗрдВ рдФрд░ рд╕рдВрднрд╛рд╡рд┐рдд рдмреАрдорд╛рд░реА рдХреЗ рдЬреЛрдЦрд┐рдореЛрдВ рдХреЛ рд╡рд┐рд╕реНрддреГрдд рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдХреЗ рд╕рд╛рде рджреЗрдЦреЗрдВред")

# ---------- рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рд╡рд┐рд╡рд░рдг рдлреЙрд░реНрдо ----------
with st.form("user_form"):
    col1, col2 = st.columns(2)
    with col1:
        name = st.text_input("ЁЯСд рдкреВрд░рд╛ рдирд╛рдо")
        age = st.number_input("ЁЯОВ рдЙрдореНрд░", min_value=0, max_value=120, step=1)
        gender = st.radio("тЪз рд▓рд┐рдВрдЧ", ["рдкреБрд░реБрд╖", "рдорд╣рд┐рд▓рд╛", "рдЕрдиреНрдп"])
        mobile = st.text_input("ЁЯУ▒ рдореЛрдмрд╛рдЗрд▓ рдирдВрдмрд░")
        weight = st.number_input("тЪЦ рд╡рдЬрди (рдХрд┐рд▓реЛрдЧреНрд░рд╛рдо)", min_value=1, max_value=300)
        height = st.number_input("ЁЯУП рд▓рдВрдмрд╛рдИ (рд╕реЗрдВрдЯреАрдореАрдЯрд░)", min_value=50, max_value=250)
        
    with col2:
        st.subheader("ЁЯй║ рдЪрд┐рдХрд┐рддреНрд╕рд╛ рдЗрддрд┐рд╣рд╛рд╕")
        bp = st.checkbox("рдЙрдЪреНрдЪ рд░рдХреНрддрдЪрд╛рдк")
        diabetes = st.checkbox("рдордзреБрдореЗрд╣")
        heart = st.checkbox("рд╣реГрджрдп рд╕рдВрдмрдВрдзреА рд╕рдорд╕реНрдпрд╛рдПрдВ")
        thyroid = st.checkbox("рдерд╛рдпрд░рд╛рдЗрдб рд╕рдорд╕реНрдпрд╛рдПрдВ")
        asthma = st.checkbox("рдЕрд╕реНрдердорд╛/рд╢реНрд╡рд╕рди рд╕рдВрдмрдВрдзреА рд╕рдорд╕реНрдпрд╛рдПрдВ")
        kidney = st.checkbox("рдХрд┐рдбрдиреА рд░реЛрдЧ")
        liver = st.checkbox("рд▓рд┐рд╡рд░ рд░реЛрдЧ")
        cancer_history = st.checkbox("рдХреИрдВрд╕рд░ рдХрд╛ рдкрд╛рд░рд┐рд╡рд╛рд░рд┐рдХ рдЗрддрд┐рд╣рд╛рд╕")
        location = st.text_input("ЁЯУН рд╕реНрдерд╛рди / рд╢рд╣рд░")

    st.subheader("ЁЯзН рд▓рдХреНрд╖рдг рдЪреБрдиреЗрдВ")

    # ---------- рдЙрдиреНрдирдд рд▓рдХреНрд╖рдг рд╕реВрдЪреА ----------
    basic_symptoms = [
        "рдмреБрдЦрд╛рд░", "рдардВрдб рд▓рдЧрдирд╛", "рдердХрд╛рди", "рд╕рд┐рд░рджрд░реНрдж", "рдорддрд▓реА", "рдЙрд▓реНрдЯреА", 
        "рдорд╛рдВрд╕рдкреЗрд╢рд┐рдпреЛрдВ рдореЗрдВ рджрд░реНрдж", "рдЬреЛрдбрд╝реЛрдВ рдореЗрдВ рджрд░реНрдж", "рдХрдордЬреЛрд░реА", "рдЪрдХреНрдХрд░ рдЖрдирд╛"
    ]
    
    respiratory_symptoms = [
        "рдЦрд╛рдВрд╕реА", "рд╕рд╛рдВрд╕ рд▓реЗрдиреЗ рдореЗрдВ рддрдХрд▓реАрдл", "рдЫрд╛рддреА рдореЗрдВ рдЬрдХрдбрд╝рди", "рдмрд╣рддреА рдирд╛рдХ", 
        "рдЧрд▓реЗ рдореЗрдВ рдЦрд░рд╛рд╢", "рдЫреАрдВрдХ рдЖрдирд╛", "рдШрд░рдШрд░рд╛рд╣рдЯ", "рдЧрдВрдз рди рдЖрдирд╛", "рд╕реНрд╡рд╛рдж рди рдЖрдирд╛"
    ]
    
    digestive_symptoms = [
        "рджрд╕реНрдд", "рдкреЗрдЯ рджрд░реНрдж", "рднреВрдЦ рди рд▓рдЧрдирд╛", "рдкреЗрдЯ рдлреВрд▓рдирд╛", 
        "рдХрдмреНрдЬ", "рд╕реАрдиреЗ рдореЗрдВ рдЬрд▓рди", "рдорд▓ рдореЗрдВ рдЦреВрди", "рдирд┐рдЧрд▓рдиреЗ рдореЗрдВ рдХрдард┐рдирд╛рдИ",
        "рдЕрддреНрдпрдзрд┐рдХ рдкреНрдпрд╛рд╕ рд▓рдЧрдирд╛", "рдмрд╛рд░-рдмрд╛рд░ рдкреЗрд╢рд╛рдм рдЖрдирд╛"
    ]
    
    neurological_symptoms = [
        "рднреНрд░рдо", "рдпрд╛рджрджрд╛рд╢реНрдд рдХреА рд╕рдорд╕реНрдпрд╛", "рд╕реБрдиреНрдирддрд╛", "рдЭреБрдирдЭреБрдиреА рд╕рдирд╕рдиреА",
        "рджреГрд╖реНрдЯрд┐ рд╕рдВрдмрдВрдзреА рд╕рдорд╕реНрдпрд╛рдПрдВ", "рд╕реБрдирдиреЗ рдореЗрдВ рд╕рдорд╕реНрдпрд╛", "рд╕рдВрддреБрд▓рди рдХреА рд╕рдорд╕реНрдпрд╛", "рджреМрд░реЗ",
        "рдмреЛрд▓рдиреЗ рдореЗрдВ рдХрдард┐рдирд╛рдИ", "рдХрдВрдкрди"
    ]
    
    skin_symptoms = [
        "рдЪрдХрддреНрддреЗ", "рдЦреБрдЬрд▓реА", "рдкреАрд▓реА рддреНрд╡рдЪрд╛/рдЖрдВрдЦреЗрдВ", "рдирдП рддрд┐рд▓", "рддреНрд╡рдЪрд╛ рдХрд╛ рд░рдВрдЧ рдмрджрд▓рдирд╛",
        "рдкрд┐рддреНрддреА", "рд╕реВрдЬрди", "рдЖрд╕рд╛рдиреА рд╕реЗ рдЪреЛрдЯ рд▓рдЧрдирд╛", "рдмрд╛рд▓ рдЭрдбрд╝рдирд╛", "рд░рд╛рдд рдХреЛ рдкрд╕реАрдирд╛ рдЖрдирд╛"
    ]
    
    heart_symptoms = [
        "рд╕реАрдиреЗ рдореЗрдВ рджрд░реНрдж/рджрдмрд╛рд╡", "рдмрд╛рдВрд╣/рдЬрдмрдбрд╝реЗ/рдкреАрда/рдЧрд░реНрджрди/рдЧрд▓реЗ рдореЗрдВ рджрд░реНрдж рдлреИрд▓рдирд╛", 
        "рд╕рд╛рдВрд╕ рд▓реЗрдиреЗ рдореЗрдВ рддрдХрд▓реАрдл", "рддреЗрдЬ/рдЕрдирд┐рдпрдорд┐рдд рдзрдбрд╝рдХрди", "рдкреИрд░/рдЯрдЦрдиреЛрдВ/рдкреИрд░реЛрдВ рдореЗрдВ рд╕реВрдЬрди",
        "рд╡реНрдпрд╛рдпрд╛рдо рдХрд░рдиреЗ рдХреА рдХреНрд╖рдорддрд╛ рдХрдо рд╣реЛрдирд╛", "рд▓рдЧрд╛рддрд╛рд░ рдЦрд╛рдВрд╕реА", "рдкреЗрдЯ рдореЗрдВ рд╕реВрдЬрди",
        "рддреЗрдЬреА рд╕реЗ рд╡рдЬрди рдмрдврд╝рдирд╛", "рдардВрдбреЗ рдкрд╕реАрдиреЗ рдЖрдирд╛", "рдзрдбрд╝рдХрди рддреЗрдЬ рд╣реЛрдирд╛"
    ]
    
    cancer_symptoms = [
        "рд╕реНрддрди рдореЗрдВ рдЧрд╛рдВрда/рдореЛрдЯрд╛рдкрди", "рдЕрд╕рд╛рдорд╛рдиреНрдп рдирд┐рдкреНрдкрд▓ рдбрд┐рд╕реНрдЪрд╛рд░реНрдЬ", "рд╢реНрд░реЛрдгрд┐ рдореЗрдВ рджрд░реНрдж/рд╕реВрдЬрди",
        "рдкреЗрдЯ рджрд░реНрдж/рд╕реВрдЬрди", "рдкреНрд░реЛрд╕реНрдЯреЗрдЯ рд╕рдорд╕реНрдпрд╛рдПрдВ", "рдЕрдВрдбрдХреЛрд╖ рдореЗрдВ рдЧрд╛рдВрда/рд╕реВрдЬрди",
        "рдЕрд╕рд╛рдорд╛рдиреНрдп рд░рдХреНрддрд╕реНрд░рд╛рд╡/рдЪреЛрдЯ", "рд▓рдЧрд╛рддрд╛рд░ рджрд░реНрдж", "рдореБрдВрд╣ рдХреЗ рдЫрд╛рд▓реЗ/рд░рдХреНрддрд╕реНрд░рд╛рд╡/рд╕реБрдиреНрдирддрд╛",
        "рд▓рдЧрд╛рддрд╛рд░ рдЦрд╛рдВрд╕реА/рдЖрд╡рд╛рдЬ рдмреИрдардирд╛", "рдмрд┐рдирд╛ рдХрд╛рд░рдг рд╡рдЬрди рдХрдо рд╣реЛрдирд╛", "рд╕реВрдЬрди/рдЧрд╛рдВрда",
        "рддреНрд╡рдЪрд╛ рдореЗрдВ рдмрджрд▓рд╛рд╡/рдкреАрд▓рд┐рдпрд╛/рдирдП рддрд┐рд▓", "рд▓рдЧрд╛рддрд╛рд░ рд╕рд┐рд░рджрд░реНрдж", "рдЕрддреНрдпрдзрд┐рдХ рдердХрд╛рди",
        "рджреГрд╖реНрдЯрд┐/рд╢реНрд░рд╡рдг рд╕рдВрдмрдВрдзреА рд╕рдорд╕реНрдпрд╛рдПрдВ", "рдирд┐рдЧрд▓рдиреЗ рдореЗрдВ рдХрдард┐рдирд╛рдИ", "рдорд▓ рддреНрдпрд╛рдЧ рдХреА рдЖрджрддреЛрдВ рдореЗрдВ рдмрджрд▓рд╛рд╡"
    ]

    # рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рд▓рдХреНрд╖рдг рдЪрдпрди
    selected_basic = st.multiselect("рд╕рд╛рдорд╛рдиреНрдп рд▓рдХреНрд╖рдг", basic_symptoms)
    selected_respiratory = st.multiselect("рд╢реНрд╡рд╕рди рд╕рдВрдмрдВрдзреА рд▓рдХреНрд╖рдг", respiratory_symptoms)
    selected_digestive = st.multiselect("рдкрд╛рдЪрди рд╕рдВрдмрдВрдзреА рд▓рдХреНрд╖рдг", digestive_symptoms)
    selected_neurological = st.multiselect("рдиреНрдпреВрд░реЛрд▓реЙрдЬрд┐рдХрд▓ рд▓рдХреНрд╖рдг", neurological_symptoms)
    selected_skin = st.multiselect("рддреНрд╡рдЪрд╛ рдФрд░ рд░реВрдк рд╕рдВрдмрдВрдзреА рд▓рдХреНрд╖рдг", skin_symptoms)
    selected_cancer = st.multiselect("рдХреИрдВрд╕рд░ рдХреЗ рд▓рдХреНрд╖рдг", cancer_symptoms)
    selected_heart = st.multiselect("рд╣реГрджрдп рдФрд░ рд╕рдВрдЪрд╛рд░ рд╕рдВрдмрдВрдзреА рд▓рдХреНрд╖рдг", heart_symptoms)

    # рдЕрддрд┐рд░рд┐рдХреНрдд рдЬрд╛рдирдХрд╛рд░реА
    st.subheader("ЁЯУЛ рдЕрддрд┐рд░рд┐рдХреНрдд рдЬрд╛рдирдХрд╛рд░реА")
    col3, col4 = st.columns(2)
    with col3:
        symptom_duration = st.selectbox("рдЖрдкрдХреЛ рдпреЗ рд▓рдХреНрд╖рдг рдХрд┐рддрдиреЗ рд╕рдордп рд╕реЗ рд╣реИрдВ?", 
                                      ["1 рд╕рдкреНрддрд╛рд╣ рд╕реЗ рдХрдо", "1-2 рд╕рдкреНрддрд╛рд╣", "2-4 рд╕рдкреНрддрд╛рд╣", "1-3 рдорд╣реАрдиреЗ", "3 рдорд╣реАрдиреЗ рд╕реЗ рдЕрдзрд┐рдХ"])
        severity = st.select_slider("рд▓рдХреНрд╖рдгреЛрдВ рдХреА рдЧрдВрднреАрд░рддрд╛", options=["рд╣рд▓реНрдХреЗ", "рдордзреНрдпрдо", "рдЧрдВрднреАрд░"])
    with col4:
        smoking = st.checkbox("рдзреВрдореНрд░рдкрд╛рди рдХрд░рдиреЗ рд╡рд╛рд▓рд╛")
        alcohol = st.checkbox("рдирд┐рдпрдорд┐рдд рд╢рд░рд╛рдм рдХрд╛ рд╕реЗрд╡рди")
        exercise = st.selectbox("рд╡реНрдпрд╛рдпрд╛рдо рдХреА рдЖрд╡реГрддреНрддрд┐", 
                              ["рдХрднреА рдирд╣реАрдВ", "рдХрднреА-рдХрднреА", "рд╕рдкреНрддрд╛рд╣ рдореЗрдВ 1-2 рдмрд╛рд░", "рд╕рдкреНрддрд╛рд╣ рдореЗрдВ 3-5 рдмрд╛рд░", "рд░реЛрдЬ"])

    submitted = st.form_submit_button("ЁЯФН рд▓рдХреНрд╖рдгреЛрдВ рдХрд╛ рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдХрд░реЗрдВ")

# ---------- рдмреАрдПрдордЖрдИ рдЧрдгрдирд╛ ----------
def calculate_bmi(weight, height_cm):
    height_m = height_cm / 100
    bmi = weight / (height_m ** 2)
    if bmi < 18.5:
        category = "рдХрдо рд╡рдЬрди"
    elif 18.5 <= bmi < 25:
        category = "рд╕рд╛рдорд╛рдиреНрдп"
    elif 25 <= bmi < 30:
        category = "рдЕрдзрд┐рдХ рд╡рдЬрди"
    else:
        category = "рдореЛрдЯрд╛рдкрд╛"
    return bmi, category

# ---------- рдЙрдиреНрдирдд рдирд┐рджрд╛рди рд▓реЙрдЬрд┐рдХ ----------
def enhanced_diagnose(basic, respiratory, digestive, neurological, skin, cancer, heart, age, medical_history, lifestyle):
    conditions = []
    risk_factors = []
    recommendations = []
    risk_score = 0
    
    all_symptoms = basic + respiratory + digestive + neurological + skin + cancer + heart
    symptom_count = len(all_symptoms)
    
    # рдЪрд┐рдХрд┐рддреНрд╕рд╛ рдЗрддрд┐рд╣рд╛рд╕ рдФрд░ рдЬреАрд╡рдирд╢реИрд▓реА рд╕реЗ рдЬреЛрдЦрд┐рдо рдХрд╛рд░рдХ
    if medical_history.get('bp'): risk_factors.append("рдЙрдЪреНрдЪ рд░рдХреНрддрдЪрд╛рдк")
    if medical_history.get('diabetes'): risk_factors.append("рдордзреБрдореЗрд╣")
    if medical_history.get('heart'): risk_factors.append("рд╣реГрджрдп рд░реЛрдЧ рдЗрддрд┐рд╣рд╛рд╕")
    if medical_history.get('smoking'): risk_factors.append("рдзреВрдореНрд░рдкрд╛рди")
    if medical_history.get('alcohol'): risk_factors.append("рд╢рд░рд╛рдм рдХрд╛ рд╕реЗрд╡рди")
    
    # рд╕рдВрдХреНрд░рд╛рдордХ рд░реЛрдЧ рд╡рд┐рд╢реНрд▓реЗрд╖рдг
    if "рдмреБрдЦрд╛рд░" in basic:
        if "рдЦрд╛рдВрд╕реА" in respiratory and "рд╕рд╛рдВрд╕ рд▓реЗрдиреЗ рдореЗрдВ рддрдХрд▓реАрдл" in respiratory:
            conditions.append(("рд╢реНрд╡рд╕рди рд╕рдВрдХреНрд░рдордг (COVID-19/рдЗрдиреНрдлреНрд▓реБрдПрдВрдЬрд╛/рдирд┐рдореЛрдирд┐рдпрд╛)", "рд╢реНрд╡рд╕рди рдкреНрд░рдгрд╛рд▓реА", "рдЙрдЪреНрдЪ"))
        if "рджрд╕реНрдд" in digestive and "рдкреЗрдЯ рджрд░реНрдж" in digestive:
            conditions.append(("рдЧреИрд╕реНрдЯреНрд░реЛрдЗрдВрдЯреЗрд╕реНрдЯрд╛рдЗрдирд▓ рд╕рдВрдХреНрд░рдордг", "рдкрд╛рдЪрди рддрдВрддреНрд░", "рдордзреНрдпрдо"))
        if "рдЪрдХрддреНрддреЗ" in skin and "рдЬреЛрдбрд╝реЛрдВ рдореЗрдВ рджрд░реНрдж" in basic:
            conditions.append(("рд╡рд╛рдпрд░рд▓ рд╕рдВрдХреНрд░рдордг (рдбреЗрдВрдЧреВ/рдЪрд┐рдХрдирдЧреБрдирд┐рдпрд╛)", "рдкреНрд░рддрд┐рд░рдХреНрд╖рд╛ рдкреНрд░рдгрд╛рд▓реА", "рдЙрдЪреНрдЪ"))
        if "рдкреАрд▓реА рддреНрд╡рдЪрд╛/рдЖрдВрдЦреЗрдВ" in skin:
            conditions.append(("рд╣реЗрдкреЗрдЯрд╛рдЗрдЯрд┐рд╕/рд▓рд┐рд╡рд░ рд╕рдВрдХреНрд░рдордг", "рд▓рд┐рд╡рд░", "рдЙрдЪреНрдЪ"))
    
    # рд╢реНрд╡рд╕рди рд╕реНрдерд┐рддрд┐рдпрд╛рдВ
    respiratory_symptom_count = len(respiratory)
    if respiratory_symptom_count >= 2:
        if "рдШрд░рдШрд░рд╛рд╣рдЯ" in respiratory and "рд╕рд╛рдВрд╕ рд▓реЗрдиреЗ рдореЗрдВ рддрдХрд▓реАрдл" in respiratory:
            conditions.append(("рдЕрд╕реНрдердорд╛/рдмреНрд░реЛрдВрдХрд╛рдЗрдЯрд┐рд╕", "рд╢реНрд╡рд╕рди рдкреНрд░рдгрд╛рд▓реА", "рдордзреНрдпрдо"))
        if "рдЫрд╛рддреА рдореЗрдВ рдЬрдХрдбрд╝рди" in respiratory and "рдЦрд╛рдВрд╕реА" in respiratory:
            conditions.append(("рдмреНрд░реЛрдВрдХрд╛рдЗрдЯрд┐рд╕/рдКрдкрд░реА рд╢реНрд╡рд╕рди рд╕рдВрдХреНрд░рдордг", "рд╢реНрд╡рд╕рди рдкреНрд░рдгрд╛рд▓реА", "рдордзреНрдпрдо"))
    
    # рдкрд╛рдЪрди рд╕реНрдерд┐рддрд┐рдпрд╛рдВ
    digestive_symptom_count = len(digestive)
    if digestive_symptom_count >= 3:
        if "рдорд▓ рдореЗрдВ рдЦреВрди" in digestive or "рдирд┐рдЧрд▓рдиреЗ рдореЗрдВ рдХрдард┐рдирд╛рдИ" in digestive:
            conditions.append(("рдЧреИрд╕реНрдЯреНрд░реЛрдЗрдВрдЯреЗрд╕реНрдЯрд╛рдЗрдирд▓ рд╡рд┐рдХрд╛рд░ (IBD/рдЕрд▓реНрд╕рд░)", "рдкрд╛рдЪрди рддрдВрддреНрд░", "рдЙрдЪреНрдЪ"))
        elif "рдкреЗрдЯ рдлреВрд▓рдирд╛" in digestive and "рдкреЗрдЯ рджрд░реНрдж" in digestive:
            conditions.append(("рдЪрд┐рдбрд╝рдЪрд┐рдбрд╝рд╛ рдЖрдВрддреНрд░ рд╕рд┐рдВрдбреНрд░реЛрдо", "рдкрд╛рдЪрди рддрдВрддреНрд░", "рдордзреНрдпрдо"))
    
    # рдиреНрдпреВрд░реЛрд▓реЙрдЬрд┐рдХрд▓ рд╕реНрдерд┐рддрд┐рдпрд╛рдВ
    neurological_symptom_count = len(neurological)
    if neurological_symptom_count >= 2:
        if "рд╕рд┐рд░рджрд░реНрдж" in basic and "рджреГрд╖реНрдЯрд┐ рд╕рдВрдмрдВрдзреА рд╕рдорд╕реНрдпрд╛рдПрдВ" in neurological:
            conditions.append(("рдорд╛рдЗрдЧреНрд░реЗрди/рдиреНрдпреВрд░реЛрд▓реЙрдЬрд┐рдХрд▓ рд╡рд┐рдХрд╛рд░", "рддрдВрддреНрд░рд┐рдХрд╛ рддрдВрддреНрд░", "рдордзреНрдпрдо"))
        if "рд╕реБрдиреНрдирддрд╛" in neurological and "рдЭреБрдирдЭреБрдиреА рд╕рдирд╕рдиреА" in neurological:
            conditions.append(("рдиреНрдпреВрд░реЛрдкреИрдереА", "рддрдВрддреНрд░рд┐рдХрд╛ рддрдВрддреНрд░", "рдордзреНрдпрдо"))
    
    # рд╣реГрджрдп рд╕рдВрдмрдВрдзреА рдЬреЛрдЦрд┐рдо рдореВрд▓реНрдпрд╛рдВрдХрди
    heart_symptom_count = len(heart)
    if heart_symptom_count >= 2:
        conditions.append(("рд╣реГрджрдп рд╕рдВрдмрдВрдзреА рд╕рдорд╕реНрдпрд╛", "рд╣реГрджрдп/рд╕рдВрдЪрд╛рд░ рдкреНрд░рдгрд╛рд▓реА", "рдЙрдЪреНрдЪ"))
        if "рд╕реАрдиреЗ рдореЗрдВ рджрд░реНрдж/рджрдмрд╛рд╡" in heart:
            recommendations.append("ЁЯЪи рд╕реАрдиреЗ рдореЗрдВ рджрд░реНрдж рдХреЗ рд▓рд┐рдП рддреБрд░рдВрдд рдЪрд┐рдХрд┐рддреНрд╕рдХреАрдп рд╕рд╣рд╛рдпрддрд╛ рд▓реЗрдВ")
    
    # рдХреИрдВрд╕рд░ рдЬреЛрдЦрд┐рдо рдореВрд▓реНрдпрд╛рдВрдХрди
    cancer_symptom_count = len(cancer)
    if cancer_symptom_count >= 2:
        risk_level = "рдЙрдЪреНрдЪ" if cancer_symptom_count >= 3 or medical_history.get('cancer_history') else "рдордзреНрдпрдо"
        conditions.append(("рд╕рдВрднрд╛рд╡рд┐рдд рдХреИрдВрд╕рд░ рд╕рдВрдХреЗрддрдХ", "рдХрдИ рдкреНрд░рдгрд╛рд▓рд┐рдпрд╛рдВ", risk_level))
        recommendations.append("рдЖрдЧреЗ рдореВрд▓реНрдпрд╛рдВрдХрди рдХреЗ рд▓рд┐рдП рдСрдиреНрдХреЛрд▓реЙрдЬрд┐рд╕реНрдЯ рд╕реЗ рдкрд░рд╛рдорд░реНрд╢ рдХрд░реЗрдВ")
    
    # рдЬреАрд╡рдирд╢реИрд▓реА рдЬреЛрдЦрд┐рдо рдореВрд▓реНрдпрд╛рдВрдХрди
    if lifestyle.get('exercise') in ["рдХрднреА рдирд╣реАрдВ", "рдХрднреА-рдХрднреА"] and medical_history.get('bp'):
        risk_factors.append("рдирд┐рд╖реНрдХреНрд░рд┐рдп рдЬреАрд╡рдирд╢реИрд▓реА")
        recommendations.append("рд╢рд╛рд░реАрд░рд┐рдХ рдЧрддрд┐рд╡рд┐рдзрд┐ рдХреЛ рд╕рдкреНрддрд╛рд╣ рдореЗрдВ 150 рдорд┐рдирдЯ рддрдХ рдмрдврд╝рд╛рдПрдВ")
    
    # рд╡реНрдпрд╛рдкрдХ рдЬреЛрдЦрд┐рдо рд╕реНрдХреЛрд░ рдХреА рдЧрдгрдирд╛
    base_score = min(symptom_count * 4, 40)  # рд▓рдХреНрд╖рдгреЛрдВ рд╕реЗ 40% рддрдХ
    age_score = min(age * 0.5, 20)  # рдЙрдореНрд░ рд╕реЗ 20% рддрдХ
    medical_score = len(risk_factors) * 5  # рдЪрд┐рдХрд┐рддреНрд╕рд╛ рдЗрддрд┐рд╣рд╛рд╕ рд╕реЗ 25% рддрдХ
    lifestyle_score = 0
    if lifestyle.get('smoking'): lifestyle_score += 10
    if lifestyle.get('alcohol'): lifestyle_score += 5
    if lifestyle.get('exercise') in ["рдХрднреА рдирд╣реАрдВ", "рдХрднреА-рдХрднреА"]: lifestyle_score += 5
    
    risk_score = min(base_score + age_score + medical_score + lifestyle_score, 95)
    
    # рдЬреЛрдЦрд┐рдо рдХрд╛рд░рдХреЛрдВ рдХреЗ рдЖрдзрд╛рд░ рдкрд░ рд╕рд╛рдорд╛рдиреНрдп рд╕рд┐рдлрд╛рд░рд┐рд╢реЗрдВ рдЬреЛрдбрд╝реЗрдВ
    if risk_score > 50:
        recommendations.append("рдкреНрд░рд╛рдердорд┐рдХ рджреЗрдЦрднрд╛рд▓ рдЪрд┐рдХрд┐рддреНрд╕рдХ рдХреЗ рд╕рд╛рде рдЕрдкреЙрдЗрдВрдЯрдореЗрдВрдЯ рд╢реЗрдбреНрдпреВрд▓ рдХрд░реЗрдВ")
    if symptom_count > 5:
        recommendations.append("рд╡реНрдпрд╛рдкрдХ рдЪрд┐рдХрд┐рддреНрд╕рд╛ рдореВрд▓реНрдпрд╛рдВрдХрди рдкрд░ рд╡рд┐рдЪрд╛рд░ рдХрд░реЗрдВ")
    
    return conditions, risk_factors, recommendations, risk_score

# ---------- рдкрд░рд┐рдгрд╛рдо рджрд┐рдЦрд╛рдПрдВ ----------
if submitted:
    if not name or not mobile:
        st.error("тЭМ рдХреГрдкрдпрд╛ рдЕрдкрдирд╛ рдирд╛рдо рдФрд░ рдореЛрдмрд╛рдЗрд▓ рдирдВрдмрд░ рджрд░реНрдЬ рдХрд░реЗрдВред")
    else:
        # рдмреАрдПрдордЖрдИ рдХреА рдЧрдгрдирд╛ рдХрд░реЗрдВ
        bmi_value, bmi_category = calculate_bmi(weight, height)
        
        # рдирд┐рджрд╛рди рдХреЗ рд▓рд┐рдП рдбреЗрдЯрд╛ рддреИрдпрд╛рд░ рдХрд░реЗрдВ
        medical_history = {
            'bp': bp, 'diabetes': diabetes, 'heart': heart, 'thyroid': thyroid,
            'asthma': asthma, 'kidney': kidney, 'liver': liver, 'cancer_history': cancer_history
        }
        
        lifestyle = {
            'smoking': smoking, 'alcohol': alcohol, 'exercise': exercise
        }
        
        # рдирд┐рджрд╛рди рдХрд░реЗрдВ
        conditions, risk_factors, recommendations, risk_score = enhanced_diagnose(
            selected_basic, selected_respiratory, selected_digestive, 
            selected_neurological, selected_skin, selected_cancer, 
            selected_heart, age, medical_history, lifestyle
        )

        # рдкрд░рд┐рдгрд╛рдо рдкреНрд░рджрд░реНрд╢рд┐рдд рдХрд░реЗрдВ
        st.success("## ЁЯУК рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдкрд░рд┐рдгрд╛рдо")
        
        # рдмреАрдПрдордЖрдИ рдФрд░ рдмреБрдирд┐рдпрд╛рджреА рдЬрд╛рдирдХрд╛рд░реА
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("рдмреАрдПрдордЖрдИ рд╕реНрдХреЛрд░", f"{bmi_value:.1f}", bmi_category)
        with col2:
            st.metric("рдХреБрд▓ рдЬреЛрдЦрд┐рдо рд╕реНрдХреЛрд░", f"{risk_score:.1f}%")
        with col3:
            st.metric("рд▓рдХреНрд╖рдгреЛрдВ рдХреА рд╕реВрдЪрдирд╛", len(selected_basic + selected_respiratory + selected_digestive + 
                                            selected_neurological + selected_skin + selected_cancer + selected_heart))
        
        # рдкрд╛рдП рдЧрдП рд░реЛрдЧ
        if conditions:
            st.warning("## ЁЯЪи рд╕рдВрднрд╛рд╡рд┐рдд рд╕реНрдерд┐рддрд┐рдпрд╛рдВ рдкрд╛рдИ рдЧрдИрдВ")
            for condition, system, risk_level in conditions:
                risk_color = "ЁЯФ┤" if risk_level == "рдЙрдЪреНрдЪ" else "ЁЯЯб" if risk_level == "рдордзреНрдпрдо" else "ЁЯЯв"
                st.write(f"{risk_color} **{condition}**")
                st.write(f"   тАв рдкреНрд░рднрд╛рд╡рд┐рдд рдкреНрд░рдгрд╛рд▓реА: {system}")
                st.write(f"   тАв рдЬреЛрдЦрд┐рдо рд╕реНрддрд░: {risk_level}")
                st.write("")
        else:
            st.info("## тЬЕ рдХреЛрдИ рдорд╣рддреНрд╡рдкреВрд░реНрдг рдмреАрдорд╛рд░реА рд╕рдВрдХреЗрддрдХ рдирд╣реАрдВ рдорд┐рд▓реЗ")
        
        # рдЬреЛрдЦрд┐рдо рдХрд╛рд░рдХ
        if risk_factors:
            st.error("## тЪая╕П рдкрд╣рдЪрд╛рдиреЗ рдЧрдП рдЬреЛрдЦрд┐рдо рдХрд╛рд░рдХ")
            for factor in risk_factors:
                st.write(f"тАв {factor}")
        
        # рд╕рд┐рдлрд╛рд░рд┐рд╢реЗрдВ
        if recommendations:
            st.success("## ЁЯТб рд╕рд┐рдлрд╛рд░рд┐рд╢реЗрдВ")
            for recommendation in recommendations:
                st.write(f"тАв {recommendation}")
        
        # рд╕рд╛рдорд╛рдиреНрдп рд╕реНрд╡рд╛рд╕реНрдереНрдп рд╕реБрдЭрд╛рд╡
        st.info("## ЁЯМЯ рд╕рд╛рдорд╛рдиреНрдп рд╕реНрд╡рд╛рд╕реНрдереНрдп рд╕реБрдЭрд╛рд╡")
        if bmi_category in ["рдЕрдзрд┐рдХ рд╡рдЬрди", "рдореЛрдЯрд╛рдкрд╛"]:
            st.write("тАв рд╕рдВрддреБрд▓рд┐рдд рдЖрд╣рд╛рд░ рдФрд░ рд╡реНрдпрд╛рдпрд╛рдо рдХреЗ рдорд╛рдзреНрдпрдо рд╕реЗ рд╡рдЬрди рдкреНрд░рдмрдВрдзрди рдкрд░ рд╡рд┐рдЪрд╛рд░ рдХрд░реЗрдВ")
        if age > 50:
            st.write("тАв рдЙрдореНрд░ рдХреЗ рдХрд╛рд░рдг рдирд┐рдпрдорд┐рдд рд╕реНрд╡рд╛рд╕реНрдереНрдп рдЬрд╛рдВрдЪ рдХреА рд╕рд┐рдлрд╛рд░рд┐рд╢ рдХреА рдЬрд╛рддреА рд╣реИ")
        if not risk_factors and risk_score < 30:
            st.write("тАв рдирд┐рдпрдорд┐рдд рдЬрд╛рдВрдЪ-рдкрдбрд╝рддрд╛рд▓ рдХреЗ рд╕рд╛рде рд╡рд░реНрддрдорд╛рди рд╕реНрд╡рд╕реНрде рдЬреАрд╡рдирд╢реИрд▓реА рдмрдирд╛рдП рд░рдЦреЗрдВ")

        # ---------- рдЧреВрдЧрд▓ рд╢реАрдЯ рдореЗрдВ рдбреЗрдЯрд╛ рд╕реЗрд╡ рдХрд░реЗрдВ ----------
        entry_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        all_symptoms = selected_basic + selected_respiratory + selected_digestive + selected_neurological + selected_skin + selected_cancer + selected_heart
        condition_list = [f"{cond} ({risk})" for cond, sys, risk in conditions]
        
        # рд╕рдЯреАрдХ рдХреЙрд▓рдо рдХреНрд░рдо рдореЗрдВ рдбреЗрдЯрд╛ рдкрдВрдХреНрддрд┐ рддреИрдпрд╛рд░ рдХрд░реЗрдВ
        data = [
            entry_time,                    # 1. рдЯрд╛рдЗрдорд╕реНрдЯреИрдореНрдк
            name,                          # 2. рдкреВрд░рд╛ рдирд╛рдо
            age,                           # 3. рдЙрдореНрд░
            gender,                        # 4. рд▓рд┐рдВрдЧ
            mobile,                        # 5. рдореЛрдмрд╛рдЗрд▓ рдирдВрдмрд░
            bp,                            # 6. рдЙрдЪреНрдЪ рд░рдХреНрддрдЪрд╛рдк
            diabetes,                      # 7. рдордзреБрдореЗрд╣
            heart,                         # 8. рд╣реГрджрдп рд╕рдВрдмрдВрдзреА рд╕рдорд╕реНрдпрд╛рдПрдВ
            thyroid,                       # 9. рдерд╛рдпрд░рд╛рдЗрдб рд╕рдорд╕реНрдпрд╛рдПрдВ
            asthma,                        # 10. рдЕрд╕реНрдердорд╛/рд╢реНрд╡рд╕рди рд╕рдВрдмрдВрдзреА рд╕рдорд╕реНрдпрд╛рдПрдВ
            kidney,                        # 11. рдХрд┐рдбрдиреА рд░реЛрдЧ
            liver,                         # 12. рд▓рд┐рд╡рд░ рд░реЛрдЧ
            cancer_history,                # 13. рдХреИрдВрд╕рд░ рдХрд╛ рдкрд╛рд░рд┐рд╡рд╛рд░рд┐рдХ рдЗрддрд┐рд╣рд╛рд╕
            location,                      # 14. рд╕реНрдерд╛рди/рд╢рд╣рд░
            weight,                        # 15. рд╡рдЬрди (рдХрд┐рд▓реЛрдЧреНрд░рд╛рдо)
            height,                        # 16. рд▓рдВрдмрд╛рдИ (рд╕реЗрдВрдЯреАрдореАрдЯрд░)
            ", ".join(all_symptoms),       # 17. рд╕рднреА рд▓рдХреНрд╖рдг
            symptom_duration,              # 18. рд▓рдХреНрд╖рдгреЛрдВ рдХреА рдЕрд╡рдзрд┐
            severity,                      # 19. рд▓рдХреНрд╖рдгреЛрдВ рдХреА рдЧрдВрднреАрд░рддрд╛
            smoking,                       # 20. рдзреВрдореНрд░рдкрд╛рди
            alcohol,                       # 21. рд╢рд░рд╛рдм рдХрд╛ рд╕реЗрд╡рди
            exercise,                      # 22. рд╡реНрдпрд╛рдпрд╛рдо рдХреА рдЖрд╡реГрддреНрддрд┐
            ", ".join(condition_list),     # 23. рдкрд╛рдИ рдЧрдИ рд╕реНрдерд┐рддрд┐рдпрд╛рдВ
            ", ".join(risk_factors),       # 24. рдЬреЛрдЦрд┐рдо рдХрд╛рд░рдХ
            f"{risk_score:.1f}%",          # 25. рдЬреЛрдЦрд┐рдо рд╕реНрдХреЛрд░
            f"{bmi_value:.1f}",            # 26. рдмреАрдПрдордЖрдИ рдореВрд▓реНрдп
            bmi_category                   # 27. рдмреАрдПрдордЖрдИ рд╢реНрд░реЗрдгреА
        ]
        
        try:
            sheet.append_row(data)
            st.success("тЬЕ рдЖрдкрдХреА рдкреНрд░рддрд┐рдХреНрд░рд┐рдпрд╛ рд╕реБрд░рдХреНрд╖рд┐рдд рд░реВрдк рд╕реЗ рд╣рдорд╛рд░реЗ рдбреЗрдЯрд╛рдмреЗрд╕ рдореЗрдВ рджрд░реНрдЬ рдХрд░ рджреА рдЧрдИ рд╣реИред")
        except Exception as e:
            st.error(f"тЪая╕П рдбреЗрдЯрд╛рдмреЗрд╕ рдореЗрдВ рд╕реЗрд╡ рдирд╣реАрдВ рдХрд┐рдпрд╛ рдЬрд╛ рд╕рдХрд╛: {str(e)}")

# ---------- рдЕрддрд┐рд░рд┐рдХреНрдд рд╕реБрд╡рд┐рдзрд╛рдУрдВ рд╡рд╛рд▓рд╛ рд╕рд╛рдЗрдбрдмрд╛рд░ ----------
with st.sidebar:
    st.header("тД╣я╕П рдЗрд╕ рдЯреВрд▓ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ")
    st.write("""
    рдпрд╣ рдЙрдиреНрдирдд рд▓рдХреНрд╖рдг рдЬрд╛рдВрдЪрдХрд░реНрддрд╛ рдЖрдкрдХреЗ рд▓рдХреНрд╖рдгреЛрдВ рдХрд╛ рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдХрд░рддрд╛ рд╣реИ:
    - рд╕рдВрдХреНрд░рд╛рдордХ рд░реЛрдЧ
    - рд╢реНрд╡рд╕рди рд╕реНрдерд┐рддрд┐рдпрд╛рдВ
    - рдкрд╛рдЪрди рд╡рд┐рдХрд╛рд░
    - рдиреНрдпреВрд░реЛрд▓реЙрдЬрд┐рдХрд▓ рд╕рдорд╕реНрдпрд╛рдПрдВ
    - рд╣реГрджрдп рд╕рдВрдмрдВрдзреА рдЬреЛрдЦрд┐рдо
    - рдХреИрдВрд╕рд░ рд╕рдВрдХреЗрддрдХ
    """)
    
    st.header("ЁЯУИ рд╕реНрд╡рд╛рд╕реНрдереНрдп рдореЗрдЯреНрд░рд┐рдХреНрд╕")
    if submitted and 'bmi_value' in locals():
        st.metric("рдЖрдкрдХрд╛ рдмреАрдПрдордЖрдИ", f"{bmi_value:.1f}")
        st.metric("рдЬреЛрдЦрд┐рдо рд╕реНрдХреЛрд░", f"{risk_score:.1f}%")
        
        # рдмреАрдПрдордЖрдИ рдЪрд╛рд░реНрдЯ
        bmi_data = pd.DataFrame({
            'рд╢реНрд░реЗрдгреА': ['рдХрдо рд╡рдЬрди', 'рд╕рд╛рдорд╛рдиреНрдп', 'рдЕрдзрд┐рдХ рд╡рдЬрди', 'рдореЛрдЯрд╛рдкрд╛'],
            'рд╕реАрдорд╛': ['<18.5', '18.5-24.9', '25-29.9', '30+']
        })
        st.dataframe(bmi_data, hide_index=True)
    
    st.header("ЁЯЪи рдЖрдкрд╛рддрдХрд╛рд▓реАрди рд▓рдХреНрд╖рдг")
    st.write("""
    рддрддреНрдХрд╛рд▓ рдЪрд┐рдХрд┐рддреНрд╕рдХреАрдп рджреЗрдЦрднрд╛рд▓ рд▓реЗрдВ:
    - рд╕реАрдиреЗ рдореЗрдВ рджрд░реНрдж/рджрдмрд╛рд╡
    - рд╕рд╛рдВрд╕ рд▓реЗрдиреЗ рдореЗрдВ рдХрдард┐рдирд╛рдИ
    - рдЧрдВрднреАрд░ рдкреЗрдЯ рджрд░реНрдж
    - рдЕрдЪрд╛рдирдХ рдХрдордЬреЛрд░реА/рд╕реБрдиреНрдирддрд╛
    - рдЖрддреНрдорд╣рддреНрдпрд╛ рдХреЗ рд╡рд┐рдЪрд╛рд░
    - рдЧрдВрднреАрд░ рд░рдХреНрддрд╕реНрд░рд╛рд╡
    """)

# ---------- рдлреБрдЯрд░ ----------
st.markdown("---")
st.caption("""
тЪая╕П **рдЕрд╕реНрд╡реАрдХрд░рдг**: рдпрд╣ рдЯреВрд▓ рдХреЗрд╡рд▓ рд╢реИрдХреНрд╖рд┐рдХ рдФрд░ рд╕реВрдЪрдирд╛рддреНрдордХ рдЙрджреНрджреЗрд╢реНрдпреЛрдВ рдХреЗ рд▓рд┐рдП рд╣реИред 
рдпрд╣ рдЪрд┐рдХрд┐рддреНрд╕рдХреАрдп рд╕рд▓рд╛рд╣, рдирд┐рджрд╛рди рдпрд╛ рдЙрдкрдЪрд╛рд░ рдкреНрд░рджрд╛рди рдирд╣реАрдВ рдХрд░рддрд╛ рд╣реИред рдЪрд┐рдХрд┐рддреНрд╕рдХреАрдп рдЪрд┐рдВрддрд╛рдУрдВ рдХреЗ рд▓рд┐рдП 
рд╣рдореЗрд╢рд╛ рдпреЛрдЧреНрдп рд╕реНрд╡рд╛рд╕реНрдереНрдп рджреЗрдЦрднрд╛рд▓ рдкреЗрд╢реЗрд╡рд░реЛрдВ рд╕реЗ рдкрд░рд╛рдорд░реНрд╢ рд▓реЗрдВред
""")
